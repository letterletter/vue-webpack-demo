var _excluded = ["value", "modal", "comment", "toolbar", "children"];
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback, useMemo, useState, Children, isValidElement } from "react";
import Dialog from "@astii/dialog";
import ToolPanel from "../ToolPanel";
import { Coder } from "../Editor";
import { executeChain } from "../util";
import { useUpdate } from "./useUpdate";
import styles from "./index.module.less";
var Icon = Dialog.Icon;
var EditorWrap = function EditorWrap(props, ref) {
  var value = props.value,
    modal = props.modal,
    comment = props.comment,
    toolbar = props.toolbar,
    children = props.children,
    codeProps = _objectWithoutProperties(props, _excluded);
  var _useState = useState(!!(modal !== null && modal !== void 0 && modal.open)),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(function () {
      return value;
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    nextValue = _useState4[0],
    setValue = _useState4[1];
  useUpdate(function () {
    setOpen(!!(modal !== null && modal !== void 0 && modal.open));
  }, [modal === null || modal === void 0 ? void 0 : modal.open]);
  useUpdate(function () {
    setValue(value);
  }, [value]);
  var Editor = useMemo(function () {
    return /*#__PURE__*/React.createElement(Coder, _extends({}, codeProps, {
      value: nextValue,
      ref: ref
    }));
  }, [codeProps, nextValue, ref]);
  var Comment = useMemo(function () {
    var _codeProps$options, _ref, _comment$height;
    var random = Math.floor(Math.random() * 10);
    return comment !== null && comment !== void 0 && comment.value ? /*#__PURE__*/React.createElement(Coder, _extends({}, codeProps, {
      value: comment.value,
      options: {
        readOnly: true,
        lineNumbers: "off",
        fontSize: (_codeProps$options = codeProps.options) === null || _codeProps$options === void 0 ? void 0 : _codeProps$options.fontSize
      },
      height: (_ref = (_comment$height = comment.height) !== null && _comment$height !== void 0 ? _comment$height : codeProps.height) !== null && _ref !== void 0 ? _ref : 300,
      path: "".concat(random, "_comment.ts")
    })) : null;
  }, [codeProps, comment, codeProps.theme]);
  var setNextValue = useCallback(function () {
    if (ref.current.editor) {
      var _nextValue = ref.current.editor.getValue();
      setValue(_nextValue);
    }
  }, []);
  var handleOpen = useCallback(function () {
    executeChain([setNextValue, function () {
      return setOpen(true);
    }]);
    typeof (modal === null || modal === void 0 ? void 0 : modal.onOpen) === "function" && modal.onOpen();
  }, [modal === null || modal === void 0 ? void 0 : modal.onOpen]);
  var handleClose = useCallback(function () {
    executeChain([setNextValue, function () {
      return setOpen(false);
    }]);
    typeof (modal === null || modal === void 0 ? void 0 : modal.onClose) === "function" && modal.onClose();
  }, [modal === null || modal === void 0 ? void 0 : modal.onClose]);
  var Toolbar = useMemo(function () {
    if (!toolbar) return null;
    var tools = _toConsumableArray(Children.toArray(toolbar));
    if (modal && !open) {
      tools.push( /*#__PURE__*/React.createElement(Icon, {
        name: "plus",
        onClick: handleOpen
      }));
    }
    return /*#__PURE__*/React.createElement(ToolPanel, null, tools);
  }, [modal, open, toolbar]);
  var initHeight = useMemo(function () {
    var _codeProps$height;
    if ( /*#__PURE__*/isValidElement(children)) {
      return "fit-content";
    }
    return (_codeProps$height = codeProps.height) !== null && _codeProps$height !== void 0 ? _codeProps$height : 500;
  }, [children, codeProps.height]);
  return /*#__PURE__*/React.createElement("div", {
    className: styles.wrap,
    style: {
      height: initHeight
    }
  }, open && /*#__PURE__*/React.createElement(Dialog, _extends({
    draggable: true,
    contentClassName: styles['dialog-content']
  }, modal, {
    open: open,
    footer: Comment,
    onClose: handleClose
  }), Editor, Toolbar), children, !open && !children && /*#__PURE__*/React.createElement(React.Fragment, null, Editor, Toolbar));
};
export default /*#__PURE__*/forwardRef(EditorWrap);