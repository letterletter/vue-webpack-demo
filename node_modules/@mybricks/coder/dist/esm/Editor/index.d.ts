import React from "react";
import { EditorProps, Monaco } from "@monaco-editor/react";
import type { TransformOptions } from "@babel/core";
import type { editor } from "monaco-types";
import { Theme } from "./jsxTheme";
import "./index.css";
export interface CoderProps extends EditorProps {
    extraLib?: string;
    isTsx?: boolean;
    loaderConfig?: {
        paths?: {
            vs?: string;
        };
    };
    eslint?: {
        src?: string;
        config?: Record<string, any>;
    };
    babel?: {
        standalone?: string;
        options?: TransformOptions;
    };
    onBlur?: (editor: editor) => void;
    onFocus?: (editor: editor) => void;
}
export type HandlerType = {
    monaco: Monaco;
    editor: editor;
    format(): void;
    compile(value: string | undefined, options?: TransformOptions): Promise<string>;
};
declare const Coder: React.ForwardRefExoticComponent<CoderProps & React.RefAttributes<HandlerType>>;
export { Coder, editor, Theme };
