function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
export var Language = /*#__PURE__*/function (Language) {
  Language["Javascript"] = "javascript";
  Language["Typescript"] = "typescript";
  return Language;
}({});
var ConfigMap = _defineProperty(_defineProperty({}, Language.Javascript, function (monaco) {
  monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
    noSemanticValidation: false,
    noSyntaxValidation: false
  });
  monaco.languages.typescript.javascriptDefaults.setCompilerOptions({
    target: monaco.languages.typescript.ScriptTarget.ES6,
    allowNonTsExtensions: true,
    noImplicitAny: true,
    strict: true
  });
}), Language.Typescript, function (monaco, isTsx) {
  monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
    noSemanticValidation: !!isTsx || false,
    noSyntaxValidation: false
  });
  monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
    target: monaco.languages.typescript.ScriptTarget.ES6,
    allowNonTsExtensions: true,
    noImplicitAny: false,
    strict: false,
    jsx: monaco.languages.typescript.JsxEmit.ReactJsx,
    lib: ["es2020", "dom", "DOM.Iterable"],
    module: "ESNext",
    skipLibCheck: true,
    esModuleInterop: true,
    noEmit: true,
    jsxFactory: "React.createElement",
    reactNamespace: "React"
  });
});
export var getConfigSetter = function getConfigSetter(language) {
  var _ConfigMap$language;
  return (_ConfigMap$language = ConfigMap[language]) !== null && _ConfigMap$language !== void 0 ? _ConfigMap$language : function () {};
};
var TransformOptions = _defineProperty(_defineProperty({}, Language.Javascript, function () {
  return {
    presets: ["env"],
    comments: false
  };
}), Language.Typescript, function (isTsx) {
  return !!isTsx ? {
    presets: ["env", "react"],
    parserOpts: {
      strictMode: false
    },
    plugins: [["proposal-decorators", {
      legacy: true
    }], "proposal-class-properties", ["transform-typescript", {
      isTSX: true
    }]]
  } : {
    presets: ["env", "typescript"],
    parserOpts: {
      strictMode: false
    },
    comments: false,
    filename: "types.d.ts"
  };
});
export var getTransformOptions = function getTransformOptions(language) {
  var _TransformOptions$lan;
  return (_TransformOptions$lan = TransformOptions[language]) !== null && _TransformOptions$lan !== void 0 ? _TransformOptions$lan : function () {};
};