function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { cloneElement, Children, useState, useCallback, useRef, useMemo, isValidElement } from "react";
var Draggable = function Draggable(_ref) {
  var inside = _ref.inside,
    children = _ref.children;
  var childrenProp = children.props.children;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    transform = _useState2[0],
    setTransform = _useState2[1];
  var rootRef = useRef(null);
  var startPosition = useRef([0, 0]);
  var offset = useRef([0, 0]);
  var insetThreshold = useRef();
  var onMouseDown = useCallback(function (e) {
    var _rootRef$current, _rootRef$current2;
    startPosition.current = [e.clientX, e.clientY];
    var _window$getComputedSt = window.getComputedStyle(rootRef.current),
      transform = _window$getComputedSt.transform,
      top = _window$getComputedSt.top,
      bottom = _window$getComputedSt.bottom,
      left = _window$getComputedSt.left,
      right = _window$getComputedSt.right;
    var wrapRect = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 || (_rootRef$current = _rootRef$current.parentElement) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.getBoundingClientRect();
    var currentRect = (_rootRef$current2 = rootRef.current) === null || _rootRef$current2 === void 0 ? void 0 : _rootRef$current2.getBoundingClientRect();
    if (wrapRect && currentRect) insetThreshold.current = [-parseFloat(top), ((wrapRect === null || wrapRect === void 0 ? void 0 : wrapRect.width) - (currentRect === null || currentRect === void 0 ? void 0 : currentRect.width)) / 2 - parseFloat(right), (wrapRect === null || wrapRect === void 0 ? void 0 : wrapRect.height) - (currentRect === null || currentRect === void 0 ? void 0 : currentRect.height) + parseFloat(bottom), -(((wrapRect === null || wrapRect === void 0 ? void 0 : wrapRect.width) - (currentRect === null || currentRect === void 0 ? void 0 : currentRect.width)) / 2 - parseFloat(left))];
    if (transform && transform !== "none") {
      var translate = transform === null || transform === void 0 ? void 0 : transform.split(",");
      offset.current = [parseFloat(translate[4]), parseFloat(translate[5])];
    }
    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
    e.preventDefault();
  }, []);
  var onMouseMove = useCallback(function (e) {
    var dx = e.clientX - startPosition.current[0];
    var dy = e.clientY - startPosition.current[1];
    dx = offset.current[0] + dx;
    dy = offset.current[1] + dy;
    if (inside && insetThreshold.current) {
      if (dx < insetThreshold.current[3]) dx = insetThreshold.current[3];
      if (dx > insetThreshold.current[1]) dx = insetThreshold.current[1];
      if (dy < insetThreshold.current[0]) dy = insetThreshold.current[0];
      if (dy > insetThreshold.current[2]) dy = insetThreshold.current[2];
    }
    requestAnimationFrame(function () {
      return setTransform("translate(".concat(dx, "px, ").concat(dy, "px)"));
    });
  }, [inside]);
  var onMouseUp = useCallback(function () {
    document.removeEventListener("mousemove", onMouseMove);
    document.removeEventListener("mouseup", onMouseUp);
  }, []);
  var bindMouseDown = useCallback(function (children) {
    for (var index = 0; index < children.length; index++) {
      var node = children[index];
      if (! /*#__PURE__*/isValidElement(node)) continue;
      if ("data-handler" in node.props) {
        children[index] = /*#__PURE__*/cloneElement(node, _objectSpread(_objectSpread({}, node.props), {}, {
          onMouseDown: onMouseDown,
          style: _objectSpread(_objectSpread({}, node.props.style), {}, {
            cursor: "move"
          })
        }));
        return;
      } else if (node.props.children) {
        bindMouseDown(node.props.children);
      }
    }
  }, []);
  var ChildNodes = useMemo(function () {
    var children = Children.toArray(childrenProp);
    bindMouseDown(children);
    return children;
  }, [childrenProp]);
  return /*#__PURE__*/cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {
    style: _objectSpread(_objectSpread({}, children.props.style), {}, {
      transform: transform
    }),
    children: ChildNodes,
    ref: rootRef
  }));
};
export default Draggable;